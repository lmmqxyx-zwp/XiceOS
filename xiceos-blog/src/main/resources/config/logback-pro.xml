<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 名称 ✌xiceos-blog💎 -->
    <contextName>✌xiceos-blog💎</contextName>

    <!-- 日志输出目录 -->
    <property name="logback.logdir" value="/var/xiceos/blog/log" />
    <property name="logback.appname" value="xiceos-blog" />

    <!-- 输出到文件 -->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
            如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高， 所以我们使用下面的策略，
            可以避免输出Error 的日志
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 Error -->
            <level>ERROR</level>
            <!--匹配到就禁止 -->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许 -->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <!--
            日志名称，如果没有 File 属性，那么只会使用 FileNamePattern 的文件路径规则 如果同时有<File>和<FileNamePattern>，
            那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${logback.logdir}/info.${logback.appname}.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!--日志输出编码格式化 -->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName ●%thread● ⛅%-5level %replace(%caller{1}){'\t|Caller.{1}0|\r\n', ''} - %m%n</pattern>
        </encoder>
    </appender>

    <!-- 输出到文件 -->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>
        <!--
            日志名称，如果没有 File 属性，那么只会使用 FileNamePattern 的文件路径规则 如果同时有<File>和<FileNamePattern>，
            那么当天日志是<File>，明天会自动把今天的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${logback.logdir}/error.${logback.appname}.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
            <FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--只保留最近90天的日志 -->
            <maxHistory>90</maxHistory>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!--日志输出编码格式化 -->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName ●%thread● 🌧%-5level %replace(%caller{1}){'\t|Caller.{1}0|\r\n', ''} - %m%n</pattern>
        </encoder>
    </appender>

    <!-- 格式化输出
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %thread | %-5level | %logger{36}.%M | %X{clientDatetime} | %X{ip} | %X{clientIp} | %X{upIp} | %X{tokenId} | %X{operateId} | %X{deviceId} | %chain | %X{systemId} | %X{clientSystemId} | %X{serverSystemId} | %msg%n</pattern>
        <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} | %thread | %-5level | %logger{100} | %X{clientIp} | %X{operateId} | %msg%n</pattern>
    </encoder>
    -->

    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <!-- pattern>%d{HH:mm:ss.SSS} [%contextName] [%thread] %-5level %logger{36} - %msg%n</pattern-->
                <!-- %d{yyyy-MM-dd HH:mm:ss,SSS} %5p [%t] %replace(%caller{1}){'\t|Caller.{1}0|\r\n', ''} - %m%n -->
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %contextName ●%thread● ⛅%-5level🌧 %replace(%caller{1}){'\t|Caller.{1}0|\r\n', ''} - %m%n</pattern>
            </pattern>
        </layout>
        <!--
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>ERROR</level>
        </filter>
         -->
    </appender>

    <!--指定最基础的日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="fileInfoLog" />
        <appender-ref ref="fileErrorLog" />
        <appender-ref ref="consoleLog" />
    </root>
</configuration>